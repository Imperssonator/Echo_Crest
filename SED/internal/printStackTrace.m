%> @file printStackTrace.m
%> @authors: SUMO Lab Team
%> @version 7.0.2 (Revision: 6486)
%> @date 2006-2010
%>
%> This file is part of the Surrogate Modeling Toolbox ("SUMO Toolbox")
%> and you can redistribute it and/or modify it under the terms of the
%> GNU Affero General Public License version 3 as published by the
%> Free Software Foundation.  With the additional provision that a commercial
%> license must be purchased if the SUMO Toolbox is used, modified, or extended
%> in a commercial setting. For details see the included LICENSE.txt file.
%> When referring to the SUMO Toolbox please make reference to the corresponding
%> publication:
%>   - A Surrogate Modeling and Adaptive Sampling Toolbox for Computer Based Design
%>   D. Gorissen, K. Crombecq, I. Couckuyt, T. Dhaene, P. Demeester,
%>   Journal of Machine Learning Research,
%>   Vol. 11, pp. 2051-2055, July 2010. 
%>
%> Contact : sumo@sumo.intec.ugent.be - http://sumo.intec.ugent.be

% ======================================================================
%> @brief TODO
%>
%>	Print the stack trace generated by the error() function of matlab in a
%>	readable manner.
% ======================================================================
function [msg] = printStackTrace(stack, logger)


import java.util.logging.*;

if nargin == 1
	logger = [];
end


for i=1:length(stack)
	[functionName, fullName] = fixFileName( stack(i).file );
	ornament = iff( i==1, 'In', 'Called from' );
	subFunction = iff( strcmp( functionName, stack(i).name ), '', sprintf( ' >> function %s', stack(i).name ) );
	msg = sprintf( '\t%s file %s%s, line %d', ornament, fullName, subFunction, stack(i).line );

	if(nargout > 0)
		% do nothing, return
	else
		if nargin > 1
			logger.info(msg);
		else
			disp(msg);
		end
	end
end

function [func, full] = fixFileName( name )

words = stringSplit( name, '/' );

switch length(words)
	case 0
		full = '';
		func = '';
	case 1
		full = words{1};
		func = stringSplit( words{1}, '.' );
		func = func{1};
	otherwise
		tmp = words{end-1};
		full = words{end};
		classname = '';
		if length(tmp) > 1 && tmp(1) == '@'
			classname = tmp(2:end);
			private = 0;
		elseif strcmp( tmp, 'private' ) && length(words) > 2
			tmp = words{end-2};
			if tmp(1) == '@'
				classname = tmp(2:end);
				private = 1;
			end
		end
		if length(classname) > 0
			full = sprintf( '%s::%s%s', classname, full, iff( private, ' (private)', '' ) );
		end
		func = stringSplit( words{end}, '.' );
		func = func{1};
end
